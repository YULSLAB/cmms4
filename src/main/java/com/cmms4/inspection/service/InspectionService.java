package com.cmms4.inspection.service;

import com.cmms4.inspection.entity.Inspection;
import com.cmms4.inspection.entity.InspectionSchedule;
import com.cmms4.inspection.entity.InspectionItem;

import com.cmms4.inspection.repository.InspectionRepository;
import com.cmms4.inspection.repository.InspectionScheduleRepository;
import com.cmms4.inspection.repository.InspectionItemRepository;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.Optional;
import java.util.List;

/**
 * cmms4 - InspectionService
 * 점검 관리 서비스
 * 
 * @author cmms4
 * @since 2025-05-29
 */
@Service
public class InspectionService {

    private final InspectionRepository inspectionRepository;
    private final InspectionScheduleRepository inspectionScheduleRepository;
    private final InspectionItemRepository inspectionItemRepository;

    public InspectionService(
            InspectionRepository inspectionRepository,
            InspectionScheduleRepository inspectionScheduleRepository,
            InspectionItemRepository inspectionItemRepository) {
        this.inspectionRepository = inspectionRepository;
        this.inspectionScheduleRepository = inspectionScheduleRepository;
        this.inspectionItemRepository = inspectionItemRepository;
    }

    /**
     * 모든 점검 목록을 페이지네이션으로 조회
     * @param companyId 회사 ID
     * @param siteId 사이트 ID
     * @param pageable 페이지 정보
     * @return 점검 목록 페이지
     */
    @Transactional(readOnly = true)
    public Page<Inspection> getAllInspections(String companyId, String siteId, Pageable pageable) {
        return inspectionRepository.findByCompanyIdAndSiteId(companyId, siteId, pageable);
    }
    
    /**
     * 점검 ID로 점검 정보 조회
     * @param companyId 회사 ID
     * @param inspectionId 점검 ID
     * @return 점검 정보 Optional
     */
    @Transactional(readOnly = true)
    public Optional<Inspection> getInspectionByInspectionId(String companyId, Integer inspectionId) {
        return inspectionRepository.findByCompanyIdAndInspectionId(companyId, inspectionId);
    }

    /**
     * plantId로 점검 정보 조회
     * @param companyId 회사 ID
     * @param plantId 설비 ID
     * @return 점검 정보 Optional
     */
    @Transactional(readOnly = true)
    public Page<Inspection> getInspectionByPlantId(String companyId, Integer plantId, Pageable pageable) {
        return inspectionRepository.findByCompanyIdAndPlantId(companyId, plantId, pageable);
    }

    /**
     * 점검 정보 저장 (신규 등록 또는 수정)
     * @param inspection 저장할 점검 정보
     * @return 저장된 점검 정보
     */
    @Transactional
    public Inspection saveInspection(Inspection inspection, String username) {
        LocalDateTime now = LocalDateTime.now();
        boolean isNewInspection = inspection.getInspectionId() == null;

        if (isNewInspection) {
            Integer maxInspectionId = inspectionRepository.findMaxInspectionIdByCompanyId(inspection.getCompanyId());
            int newInspectionId = (maxInspectionId == null) ? 300000000 : maxInspectionId + 1; // Initial ID if no existing
            inspection.setInspectionId(newInspectionId);
            inspection.setCreateDate(now);
            inspection.setCreateBy(username);
        } else {
            inspection.setUpdateDate(now);
            inspection.setUpdateBy(username);
        }

        List<InspectionItem> globalItems = inspection.getItems(); // The @Transient list from the form

        if (inspection.getSchedules() != null) {
            int scheduleIdx = 0;
            for (InspectionSchedule schedule : inspection.getSchedules()) {
                schedule.setCompanyId(inspection.getCompanyId());
                schedule.setInspectionId(inspection.getInspectionId());
                schedule.setInspection(inspection); // Set parent relationship

                // Assign scheduleId sequentially if it's a new schedule and not set
                // This assumes scheduleId is not an identity column generated by DB for this logic to work.
                // If it's an identity, it would be set after initial save of schedule.
                // For this problem, we follow the instruction to assign sequentially if needed.
                if (schedule.getScheduleId() == null) {
                     // A more robust way might be to find max scheduleId for this inspection and increment
                    // For now, using index if it's a new schedule not yet persisted.
                    // This relies on the order of schedules from the form.
                    Integer maxScheduleIdFromRepo = inspectionScheduleRepository.findMaxScheduleIdByCompanyIdAndInspectionId(inspection.getCompanyId(), inspection.getInspectionId());
                    schedule.setScheduleId((maxScheduleIdFromRepo == null ? 0 : maxScheduleIdFromRepo +1) + scheduleIdx);
                    // If multiple new schedules are added, scheduleIdx ensures uniqueness for this batch.
                }

                // Clear old items and add new ones based on global list
                if (schedule.getItems() == null) {
                    schedule.setItems(new java.util.ArrayList<>());
                } else {
                    // If orphanRemoval=true, clearing the list and then saving the schedule
                    // should trigger deletion of items that were in this list.
                    schedule.getItems().clear();
                }

                if (globalItems != null && !globalItems.isEmpty()) {
                    int itemIdx = 0;
                    for (InspectionItem templateItem : globalItems) {
                        if (templateItem.getItemName() == null || templateItem.getItemName().trim().isEmpty()) {
                            continue; // Skip empty template items from form
                        }
                        InspectionItem newItem = new InspectionItem();
                        newItem.setCompanyId(inspection.getCompanyId());
                        newItem.setInspectionId(inspection.getInspectionId());
                        newItem.setScheduleId(schedule.getScheduleId()); // This scheduleId must be set

                        // Assign itemId sequentially for this schedule's items
                        // Similar to scheduleId, this assumes itemId is not solely DB-generated identity for this to work.
                        newItem.setItemId(itemIdx++);

                        newItem.setItemName(templateItem.getItemName());
                        newItem.setItemLower(templateItem.getItemLower());
                        newItem.setItemUpper(templateItem.getItemUpper());
                        newItem.setItemStandard(templateItem.getItemStandard());
                        newItem.setNotes(templateItem.getNotes());
                        newItem.setItemMethod(templateItem.getItemMethod());
                        newItem.setItemUnit(templateItem.getItemUnit());
                        // itemResult is typically not set at creation of template

                        newItem.setInspectionSchedule(schedule); // Set parent relationship
                        schedule.getItems().add(newItem);
                    }
                }
                scheduleIdx++; // Increment for unique scheduleId generation if multiple new schedules
            }
        }
        // Save the inspection. Cascade operations should handle schedules and items.
        return inspectionRepository.save(inspection);
    }

    /**
     * 점검 정보 삭제 (소프트 삭제)
     * @param companyId 회사 ID
     * @param inspectionId 점검 ID
     */
    @Transactional
    public void deleteInspection(String companyId, Integer inspectionId) {
    Optional<Inspection> inspectionOpt = inspectionRepository.findByCompanyIdAndInspectionId(companyId, inspectionId);
    
        if (inspectionOpt.isPresent()) {
            Inspection inspection = inspectionOpt.get();
            
            // 1. Delete all related inspection items first
            inspectionItemRepository.deleteByCompanyIdAndInspectionId(companyId, inspectionId);
            
            // 2. Delete all related schedules
            inspectionScheduleRepository.deleteByCompanyIdAndInspectionId(companyId, inspectionId);
            
            // 3. Finally delete the inspection
            inspectionRepository.delete(inspection);
        } else {
            throw new RuntimeException("Inspection not found with ID: " + inspectionId);
        }
    }

    /********************************* InspectionSchedule에 대한 부분  *********************************/
    /**
     * inspection ID로 점검 schedule 조회
     * @param companyId 회사 ID
     * @param inspectionId 점검 ID
     * @return 점검 목록 List
     */
    @Transactional(readOnly = true)
    public List<InspectionSchedule> getInspectionsByInspectionId(String companyId, Integer inspectionId) {
        return inspectionScheduleRepository.findByCompanyIdAndInspectionIdOrderByScheduleDateAsc(companyId, inspectionId);
    }

    /**
     * Schedule ID로 점검 정보 조회
     * @param companyId 회사 ID
     * @param inspectionId 점검 ID
     * @param scheduleId 일정 ID
     * @return 점검 정보 Optional
     */
    @Transactional(readOnly = true)
    public Optional<InspectionSchedule> getInspectionByScheduleId(String companyId, Integer inspectionId, Integer scheduleId) {
        return inspectionScheduleRepository.findByCompanyIdAndInspectionIdAndScheduleId(companyId, inspectionId, scheduleId);
    }

    /**
     * 점검 일정 저장 (신규 등록 또는 수정)
     * @param inspectionSchedule 저장할 점검 일정 정보
     * @return 저장된 점검 일정 정보
     */
    @Transactional
    public InspectionSchedule saveInspectionSchedule(InspectionSchedule inspectionSchedule) {
        return inspectionScheduleRepository.save(inspectionSchedule);
    }

    /**
     * 점검 일정 삭제 
     * @param companyId 회사 ID
     * @param inspectionId 점검 ID
     * @param scheduleId 일정 ID
     */
    @Transactional
    public void deleteInspectionSchedule(String companyId, Integer inspectionId, Integer scheduleId) {
        Optional<InspectionSchedule> scheduleOpt = inspectionScheduleRepository.findByCompanyIdAndInspectionIdAndScheduleId(companyId, inspectionId, scheduleId);
        if (scheduleOpt.isPresent()) {
            InspectionSchedule schedule = scheduleOpt.get();
            inspectionScheduleRepository.delete(schedule);
        } else {
            throw new RuntimeException("Inspection Schedule not found with ID: " + scheduleId);
        }
    }

    /** 점검 일정 삭제
     * @param companyId 회사 ID
     * @param inspectionId 점검 ID
     * 
     */
    @Transactional
    public void deleteInspectionSchedulesByInspectionId(String companyId, Integer inspectionId) {
        List<InspectionSchedule> schedules = inspectionScheduleRepository.findByCompanyIdAndInspectionIdOrderByScheduleDateAsc(companyId, inspectionId);
        if (!schedules.isEmpty()) {
            inspectionScheduleRepository.deleteAll(schedules);
        } else {
            throw new RuntimeException("No Inspection Schedules found for Inspection ID: " + inspectionId);
        }
    }

    /***************************** InspectionItem에 대한 부분 **********************/

    /**
     * 점검 항목 목록 조회
     * @param companyId 회사 ID
     * @param inspectionId 점검 ID
     * @param scheduleId 일정 ID
     * @return 점검 항목 목록 List
     */
    @Transactional(readOnly = true)
    public List<InspectionItem> getInspectionItems(String companyId, Integer inspectionId, Integer scheduleId) {
        return inspectionItemRepository.findByCompanyIdAndInspectionIdAndScheduleIdOrderByItemIdAsc(companyId, inspectionId, scheduleId);
    }

    /**
     * 점검 항목 조회
     * @param companyId 회사 ID
     * @param inspectionId 점검 ID
     * @param scheduleId 일정 ID
     * @param itemId 항목 ID
     * @return 점검 항목 Optional
     */
    @Transactional(readOnly = true)
    public Optional<InspectionItem> getInspectionItem(String companyId, Integer inspectionId, Integer scheduleId, Integer itemId) {
        return inspectionItemRepository.findByCompanyIdAndInspectionIdAndScheduleIdAndItemId(companyId, inspectionId, scheduleId, itemId);
    }

    /**
     * 점검 항목 저장 (신규 등록 또는 수정)
     * @param inspectionItem 저장할 점검 항목 정보
     * @return 저장된 점검 항목 정보
     */
    @Transactional
    public InspectionItem saveInspectionItem(InspectionItem inspectionItem) {
        return inspectionItemRepository.save(inspectionItem);
    }

    /**
     * 점검 항목 삭제
     * @param companyId 회사 ID
     * @param inspectionId 점검 ID
     * @param scheduleId 일정 ID
     * @param itemId 항목 ID
     */
    @Transactional
    public void deleteInspectionItem(String companyId, Integer inspectionId, Integer scheduleId, Integer itemId) {
        Optional<InspectionItem> itemOpt = inspectionItemRepository.findByCompanyIdAndInspectionIdAndScheduleIdAndItemId(companyId, inspectionId, scheduleId, itemId);
        if (itemOpt.isPresent()) {
            InspectionItem item = itemOpt.get();
            inspectionItemRepository.delete(item);
        } else {
            throw new RuntimeException("Inspection Item not found with ID: " + itemId);
        }
    }

    /**
     * 점검 항목 삭제 (일정 ID로)
     * @param companyId 회사 ID
     * @param inspectionId 점검 ID
     * @param scheduleId 일정 ID
     */
    @Transactional
    public void deleteInspectionItemsByScheduleId(String companyId, Integer inspectionId, Integer scheduleId) {
        List<InspectionItem> items = inspectionItemRepository.findByCompanyIdAndInspectionIdAndScheduleIdOrderByItemIdAsc(companyId, inspectionId, scheduleId);
        if (!items.isEmpty()) {
            inspectionItemRepository.deleteAll(items);
        } else {
            throw new RuntimeException("No Inspection Items found for Schedule ID: " + scheduleId);
        }
    }

    /**
     * 점검 항목 삭제 (점검 ID로)
     * @param companyId 회사 ID
     * @param inspectionId 점검 ID
     */
    @Transactional
    public void deleteInspectionItemsByInspectionId(String companyId, Integer inspectionId) {
        List<InspectionItem> items = inspectionItemRepository.findByCompanyIdAndInspectionIdAndScheduleIdOrderByItemIdAsc(companyId, inspectionId, null);
        if (!items.isEmpty()) {
            inspectionItemRepository.deleteAll(items);
        } else {
            throw new RuntimeException("No Inspection Items found for Inspection ID: " + inspectionId);
        }
    }
    /**
     * 결과 저장
     */
    @Transactional
    public void saveInspectionResults(Inspection inspection) {
        if (inspection.getSchedules() == null) return;
        for (InspectionSchedule schedule : inspection.getSchedules()) {
            inspectionScheduleRepository.save(schedule);
            if (schedule.getItems() != null) {
                for (InspectionItem item : schedule.getItems()) {
                    inspectionItemRepository.save(item);
                }
            }
        }
    }
}
